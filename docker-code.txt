  GNU nano 6.2                                                                      docker.sh                                                                               #!/bin/bash

set -e

echo "🛠️  System update kar rahe hain..."
sudo apt update && sudo apt upgrade -y

echo "📦 Zaroori packages install kar rahe hain..."
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release

echo "🔑 Docker GPG key add kar rahe hain..."
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo "📁 Docker repository add kar rahe hain..."
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
  https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

echo "🔄 Package list update ho rahi hai..."
sudo apt update

echo "🐳 Docker install kar rahe hain..."
sudo apt install -y docker-ce

echo "✅ Docker service ko start aur enable kar rahe hain..."
sudo systemctl start docker
sudo systemctl enable docker

echo "👤 Aapko docker group me add kar rahe hain (sudo ke bina chalane ke liye)..."
sudo usermod -aG docker $USER

echo "🚀 Docker install ho chuka hai!"
echo "➡️ Please logout aur dobara login karein taki group change ka effect aaye."
echo "✅ Check karne ke liye yeh command chalayein: docker run hello-world"












---------------------------------------------------------------> Daily youse cmds <---------------------------------------------------------------

| 🔢 | Command                                                                         | ✅ Purpose                                                 |
| -- | ------------------------------------------------------------------------------- | --------------------------------------------------------- |
| 1  | `docker images`                                                                 | ✅ Show all local Docker images                            |
| 2  | `docker pull <image-name>`                                                      | ✅ Pull image from Docker Hub (e.g., `docker pull nginx`)  |
| 3  | `docker build -t <image-name> .`                                                | ✅ Build Docker image from Dockerfile in current directory |
| 4  | `docker run -d --name <container-name> -p <host-port>:<container-port> <image>` | ✅ Run container in background and map port                |
| 5  | `docker ps -a`                                                                  | ✅ Show all containers (running + stopped)                 |
| 6  | `docker exec -it <container-id or name> bash`                                   | ✅ Enter running container terminal                        |
| 7  | `docker ps -q`                                                                  | ✅ Show only container IDs                                 |
| 8  | `docker rm <container-id>`                                                      | ✅ Remove stopped container                                |
| 9  | `docker rm -f <container-id>`                                                   | ✅ Force remove running container                          |
| 10 | `docker rmi <image-id>`                                                         | ✅ Remove image                                            |
| 11 | `docker rmi -f <image-id>`                                                      | ✅ Force remove image (even if container is using it)      |
| 12 | `docker-compose up -d`                                                          | ✅ Start services in background using `docker-compose.yml` |










--------------------------> Container Management <-----------------------

| Command                      | Description                             |
| ---------------------------- | --------------------------------------- |
| `docker stop <container>`    | Stop a running container                |
| `docker start <container>`   | Start a stopped container               |
| `docker restart <container>` | Restart a container                     |
| `docker logs <container>`    | Show container logs                     |
| `docker inspect <container>` | Detailed info (IP, env, config, etc.)   |
| `docker rename <old> <new>`  | Rename a container                      |
| `docker update <container>`  | Update resource limits (CPU, mem, etc.) |








--------------------------> Image Management <-----------------------------

| Command                          | Description                           |
| -------------------------------- | ------------------------------------- |
| `docker tag <image> <new-name>`  | Create a tag (e.g., for push to repo) |
| `docker history <image>`         | Show image build layers               |
| `docker save <image> > file.tar` | Export image to tar file              |
| `docker load < file.tar`         | Load image from tar file              |







--------------------------> Volumes <----------------------------------------------

| Command                                              | Description               |
| ---------------------------------------------------- | ------------------------- |
| `docker volume create <name>`                        | Create named volume       |
| `docker volume ls`                                   | List all volumes          |
| `docker volume rm <name>`                            | Delete volume             |
| `docker run -v volume_name:/path/in/container image` | Mount volume to container |









--------------------------> Networks <--------------------------

| Command                         | Description                 |
| ------------------------------- | --------------------------- |
| `docker network ls`             | List all networks           |
| `docker network create <name>`  | Create custom network       |
| `docker network inspect <name>` | View details                |
| `docker run --network=<name>`   | Attach container to network |







--------------------------> System Cleanup <--------------------------------------

| Command                  | Description                                          |
| ------------------------ | ---------------------------------------------------- |
| `docker system prune`    | Remove all unused data (images, containers, volumes) |
| `docker container prune` | Remove stopped containers                            |
| `docker image prune`     | Remove unused images                                 |
| `docker volume prune`    | Remove unused volumes                                |










-------------------------> Compose Advanced <---------------------------------

| Command                | Description                                         |
| ---------------------- | --------------------------------------------------- |
| `docker-compose down`  | Stop and remove containers/networks defined in YAML |
| `docker-compose logs`  | Show logs from all services                         |
| `docker-compose ps`    | Show containers created by compose                  |
| `docker-compose build` | Build images defined in YAML                        |









===================================================	===================================	===================================================
FROM <image name>

EXPOSE <continer port>

RUN <cmds>
